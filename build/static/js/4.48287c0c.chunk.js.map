{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Authentication/Authentication.module.css","containers/Authentication/Authentication.js"],"names":["input","props","inputEle","inputClasses","classes","InputEle","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","value","elementConfig","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Authentication","state","controls","email","type","placeholder","validation","required","isValid","password","minLength","isSignup","submitHandler","event","preventDefault","onAuth","onChangeSignup","setState","prevState","this","buildingBurger","authPathSet","onSetRedirectPath","controlName","updateState","updateObject","target","validityCheckHandler","formeleArray","id","config","form","formelement","formChangeHandler","btntype","clicked","authRedirect","isAuthenticated","to","loading","errorMessage","error","Component","connect","auth","burgerBuilder","building","tokenId","dispatch","actions"],"mappings":"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","file":"static/js/4.48287c0c.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css'\n\nconst input =(props)=>{\n    \n\n    let inputEle = null;\n    const inputClasses = [classes.InputEle];\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputEle=<input  className={inputClasses.join(' ')} value={props.value} {...props.elementConfig} onChange={props.changed} />\n            break;\n        case('textarea'):\n            inputEle=<textarea  className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\n            break;\n        case('select'):\n            inputEle=<select  className={inputClasses.join(' ')}\n             value={props.value} onChange={props.changed}>\n                {props.elementConfig.options.map(option =>(\n                    <option value={option.value} key={option.value}  > \n                    {option.displayValue}\n                    </option>\n                ))}\n             </select>\n            break;    \n        default:\n            inputEle=<input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}  onChange={props.changed}/>    \n    }\n    \n    \n    \n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputEle}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Lable\":\"Input_Lable__1xIRc\",\"InputEle\":\"Input_InputEle__3txmE\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Authentication\":\"Authentication_Authentication__QkOB9\",\"Input\":\"Authentication_Input__1I7xx\"};","import React, {Component} from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Authentication.module.css';\nimport {updateObject, validityCheckHandler} from '../../hoc/Shared/utility';\nimport * as actions from '../../store/action/index';\nimport {connect} from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nclass Authentication extends Component{\n    state={\n        controls:{\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Id'\n                },\n                value:'',\n                validation:{\n                    required:true,\n\n                },\n                isValid:false,\n                touched:false\n\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'Password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 7\n\n                },\n                isValid:false,\n                touched:false\n\n            }\n            \n        },\n        isSignup:true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authPathSet !=='/'){\n            this.props.onSetRedirectPath()\n        }\n    }\n\n   \n    formChangeHandler(event, controlName){\n        // const updateState ={\n        //     ...this.state.controls,\n        //     [controlName]:{\n        //         ...this.state.controls[controlName],\n        //         value:event.target.value,\n        //         touched:true,\n        //         isValid:validityCheckHandler(event.target.value,this.state.controls[controlName].validation)\n        //     }\n        // }\n\n        const updateState = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value:event.target.value,\n                touched:true,\n                isValid:validityCheckHandler(event.target.value,this.state.controls[controlName].validation)\n            })\n        });\n\n        this.setState({controls:updateState})\n    }\n\n    submitHandler=(event)=>{\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n    onChangeSignup=()=>{\n        this.setState(prevState =>{\n            return {\n                isSignup: !prevState.isSignup\n            }    \n        })\n    }\n\n    render(){\n        let formeleArray = [];\n        for(let key in this.state.controls){\n            formeleArray.push({\n                id:key,\n                config:this.state.controls[key]\n            })\n           \n        }\n        let form =(\n            <form >\n            {/*  <form> */}\n                    {/* <Input elementType='...' elementConfig='..'  value='..'></Input> */}\n                    \n                    {formeleArray.map(formelement=>(\n                        <Input key={formelement.id}\n                        elementType={formelement.config.elementType}\n                        elementConfig={formelement.config.elementConfig}\n                        value={formelement.config.value} \n                        shouldValidate={formelement.config.validation}\n                        changed={(event)=> this.formChangeHandler(event, formelement.id)}\n                        touched={formelement.config.touched}\n                        invalid={!formelement.config.isValid} />\n                    ))}\n                    {/* disabled={!this.state.formisvalid} */}\n                    <Button btntype='Success' clicked={this.submitHandler}>SUBMIT</Button>\n                </form>\n        )\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect=<Redirect to={this.props.authPathSet} />\n        }\n        if(this.props.loading){\n            form=<Spinner />\n        }\n        let errorMessage=null\n        if(this.props.error){\n        errorMessage=<p>{this.props.error}</p>\n        }\n        return(\n            <div className={classes.Authentication}>\n\n                    {form}\n                    {authRedirect}\n                    <Button btntype='Danger' clicked={this.onChangeSignup} >SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n                    {errorMessage}\n            </div>\n        );\n    }\n}\nconst mapStatetoProps=state=>{\n    return{\n        loading:state.auth.loading,\n        error:state.auth.error,\n        buildingBurger:state.burgerBuilder.building,\n        isAuthenticated: state.auth.tokenId != null,\n        authPathSet: state.auth.authRedirect\n    }\n}\nconst mapDispatchtoProps=dispatch=>{\n    return{\n        onAuth : (email,password, isSignup)=>dispatch(actions.auth(email,password, isSignup)),\n        onSetRedirectPath : ()=>dispatch(actions.authRedirectPathset('/'))\n    }\n}\n\nexport default connect(mapStatetoProps,mapDispatchtoProps)(Authentication);"],"sourceRoot":""}