{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/CheckOut/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/CheckOut/ContactData/ContactData.js","containers/CheckOut/Checkout.js"],"names":["input","props","inputEle","inputClasses","classes","InputEle","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","value","elementConfig","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","height","width","margin","Burger","ingredients","Button","clicked","cancelCheckout","btntype","continueCheckout","ContactData","state","orderForm","name","type","placeholder","validation","required","isValid","street","city","zipcode","minLength","maxLength","emailid","deliveryMethod","formisvalid","orderHandler","event","preventDefault","setState","loading","formData","formid","order","ings","price","orderData","userId","onPurchaseBurger","token","formChangeHandler","id","formOrderEle","updateObject","target","validityCheckHandler","formOrder","formeleArray","this","config","form","formelement","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","tokenId","dispatch","actionsCreator","withErrorHandler","axios","purchased","summary","to","purchaseredirct","history","goBack","console","log","replace","path","match","component"],"mappings":"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","file":"static/js/3.a4376e6a.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css'\n\nconst input =(props)=>{\n    \n\n    let inputEle = null;\n    const inputClasses = [classes.InputEle];\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputEle=<input  className={inputClasses.join(' ')} value={props.value} {...props.elementConfig} onChange={props.changed} />\n            break;\n        case('textarea'):\n            inputEle=<textarea  className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\n            break;\n        case('select'):\n            inputEle=<select  className={inputClasses.join(' ')}\n             value={props.value} onChange={props.changed}>\n                {props.elementConfig.options.map(option =>(\n                    <option value={option.value} key={option.value}  > \n                    {option.displayValue}\n                    </option>\n                ))}\n             </select>\n            break;    \n        default:\n            inputEle=<input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}  onChange={props.changed}/>    \n    }\n    \n    \n    \n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputEle}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Lable\":\"Input_Lable__1xIRc\",\"InputEle\":\"Input_InputEle__3txmE\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1lHAP\",\"Input\":\"ContactData_Input__z8PBp\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css'\nconst checkoutSummary=(props)=>{\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>Yey It tastes GOOD! </h1>\n            <div style={{height:'600px', width:'100%', margin:'auto'}}>\n                <Burger ingredients={props.ingredients} />\n\n            </div>\n            <Button clicked= {props.cancelCheckout} btntype='Danger'>CANCEL</Button>\n            <Button clicked={props.continueCheckout} btntype='Success'>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React ,{Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-order';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actionsCreator from '../../../store/action/index';\nimport {updateObject, validityCheckHandler} from '../../../hoc/Shared/utility';\n\nclass ContactData extends Component{\n\n    state={\n        orderForm:{\n            name:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Your Name'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                isValid:false,\n                touched:false\n\n            },\n            street:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                isValid:false,\n                touched:false\n\n            },               \n            city:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'City'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                isValid:false,\n                touched:false\n\n            },\n            zipcode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'ZIP code'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:5,\n                    maxLength:5\n                },\n                isValid:false,\n                touched:false\n\n            },       \n            emailid:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Your E-Mail'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                isValid:false,\n                touched:false\n\n            },    \n            deliveryMethod:{\n                elementType:'select',\n                elementConfig:{\n                    options:[\n                        {value:'fastest', displayValue:'Fastest'},\n                        {value:'cheapest', displayValue:'Cheapest'}\n\n                    ]\n                },\n                validation:{},\n                value:'fastest',\n                isValid:true,\n            }    \n        },\n        formisvalid:false\n    };\n\n    orderHandler=(event)=>{\n        event.preventDefault();\n        // console.log(this.props.ingredients)\n        this.setState({loading:true})\n        const formData={};\n        for(let formid in this.state.orderForm){\n            formData[formid]=this.state.orderForm[formid].value\n        }\n        const order={\n            ingredients:this.props.ings,\n            price:this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n            \n        }\n\n        this.props.onPurchaseBurger(order,this.props.token);\n        \n    }\n\n    formChangeHandler=(event, id)=>{\n        // const formOrder ={\n        //     ...this.state.orderForm\n        // };\n        // const formOrderEle ={\n        //     ...formOrder[id]\n        // };\n        const formOrderEle = updateObject(this.state.orderForm[id], {\n            value:event.target.value,\n            isValid: validityCheckHandler(event.target.value, this.state.orderForm[id].validation),\n            touched: true\n        });\n        // formOrderEle.value= event.target.value;\n        // formOrderEle.isValid=validityCheckHandler(event.target.value, this.state.orderForm[id].validation)\n        // formOrderEle.touched=true;\n        // formOrder[id]=formOrderEle;\n\n        const formOrder = updateObject(this.state.orderForm, {\n            [id]: formOrderEle\n        });\n\n        let formisvalid=true;\n        for(let id in formOrder){\n            formisvalid= formOrder[id].isValid && formisvalid\n        }\n\n        // console.log(formOrderEle)\n        this.setState({orderForm:formOrder, formisvalid:formisvalid})\n    }\n\n    render(){\n        let formeleArray = [];\n        for(let key in this.state.orderForm){\n            formeleArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            })\n           \n        }\n        let form =(\n            // <form onSubmit={this.orderHandler}>\n            <form>\n                    {/* <Input elementType='...' elementConfig='..'  value='..'></Input> */}\n                    \n                    {formeleArray.map(formelement=>(\n                        <Input key={formelement.id}\n                        elementType={formelement.config.elementType}\n                        elementConfig={formelement.config.elementConfig}\n                        value={formelement.config.value} \n                        shouldValidate={formelement.config.validation}\n                        changed={(event)=> this.formChangeHandler(event, formelement.id)}\n                        touched={formelement.config.touched}\n                        invalid={!formelement.config.isValid} />\n                    ))}\n\n                    <Button btntype='Success' disabled={!this.state.formisvalid}clicked={this.orderHandler}>Order</Button>\n                </form>\n        )\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStatetoProps= state =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token:state.auth.tokenId,\n        userId:state.auth.userId\n    }\n}\n\nconst mapDispatchtoProps= dispatch=>{\n    return{\n        onPurchaseBurger :(orderData,token)=>dispatch(actionsCreator.purhaseBurgerStart(orderData,token))\n    }\n    \n}\nexport default connect(mapStatetoProps,mapDispatchtoProps)(withErrorHandler(ContactData, axios));","import React  from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect } from 'react-redux'\n// import Spinner from '../../components/UI/Spinner/Spinner'\nconst Checkout = props =>{\n\n    // componentWillMount(){\n    //     console.log('checkout:::'+this.props);\n    //     const query = new URLSearchParams(this.props.location.search);\n    //     let ingredients={};\n    //     let price = 0;\n    //     for(let i of query.entries()){\n    //         if (i[0] === 'price'){\n    //             price=i[1];\n    //         }\n    //         else{\n    //             ingredients[i[0]]= +i[1];\n    //         }\n            \n    //     }\n    //     this.setState({ingredients:ingredients, price:price});\n\n    // }\n\n\n    const cancelCheckHandler=()=>{\n        props.history.goBack();\n        console.log(props)\n    }\n\n    const continueCheckHandler=()=>{\n        props.history.replace('checkout/contact-data')\n    }\n        let summary = <Redirect to='/' />\n        if(props.ings){\n            const purchaseredirct = props.purchased ? <Redirect to='/' /> : null;\n            summary = (\n            <div>\n                {purchaseredirct}\n                <CheckoutSummary ingredients={props.ings}\n                cancelCheckout={cancelCheckHandler}\n                continueCheckout={continueCheckHandler}/>\n                <Route path={props.match.path +'/contact-data'} \n                    component={ContactData}/>\n            </div>\n            )\n        }\n        return summary;\n    \n}\n\nconst mapStatetoProps = state =>{\n    return{\n        ings: state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        purchased : state.order.purchased\n    }\n}\n\n\nexport default connect(mapStatetoProps)(Checkout);"],"sourceRoot":""}